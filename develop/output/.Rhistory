MC_black_and_white<- function(n){
ns=0
m=g(2)
a=runif(n,0,2)
b=runif(n,0,g(2))
for (i in 1:n){
if (g(a[i])>=b[i]){
ns=ns+1
}
}
result<-m*(2-0)*(ns/n)
return(result)
}
g <- function(x){
result<-(exp(x)-1)/(exp(1)-1)
return(result)
}
MC_beta<-function(n){
liste_aleatoir=2*rbeta(n,2,1)#pour la q5 changer 2 par 2.8
resultat=mean(h(liste_aleatoir))
return(resultat)
}
ns=0
MC_black_and_white(n)
MC_simple(n)
vec_B=NULL
for (i in 1:100000){
vec_BW = c(vec_BW,MC_black_and_white(n))
vec_S = c(vec_S,MC_simple(n))
vec_B = c(vec_B ,MC_beta(n))
}
truehist(vec_BW, main="MC_black_and_white",xlim=c(2,3))
abline(v=(exp(2)-3)/(exp(1)-1), col="red", lwd=3, lty=2)
n=100
ns=0
MC_simple(n)
MC_simple_beta(n)
MC_simple<-function(n){
liste_aleatoir=runif(n,0,2)
resultat=(2-0)*mean(g(liste_aleatoir))
return(resultat)
}
MC_black_and_white(n)
MC_simple(n)
---
title: "PsRank"
author: "Josselin Noirel"
date: "11/09/2018"
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo=TRUE, comment=NULL)
install.packages("knitr")
library(knitr)
knitr::opts_chunk$set(echo=TRUE, comment=NULL)
library("snpStats")
install.packages("snpStats")
source("https://bioconductor.org/biocLite.R")
biocLite("snpStats")
biocLite("snpStats")
library("snpStats")
install.packages("survival")
library("survival")
install.packages("Matrix")
install.packages("Matrix")
install.packages("Matrix")
install.packages("Matrix")
install.packages("Matrix")
library("Matrix")
library("snpStats")
knitr::opts_chunk$set(echo=TRUE, comment=NULL)
library("snpStats")
PSRank(plink="filename",
frac=.5,
ranking="Z")
if (!requireNamespace("devtools", quietly = TRUE)) {
install.packages("devtools")
}
# install package
devtools::install_github("happma/pseudorank")
library(pseudorank)
PSRank(plink="filename",
frac=.5,
ranking="Z")
install.packages("pseudorank")
library("pseudorank")
PSRank(plink="filename")
install.packages("design")
library("design")
I_score = function (genotypes, phenotypes) {
b  = ! is.na(genotypes)
Ym = colSums(b * phenotypes)/colSums(b)
n0 = colSums((M0 = genotypes == 0), na.rm=TRUE)
n1 = colSums((M1 = genotypes == 1), na.rm=TRUE)
n2 = colSums((M2 = genotypes == 2), na.rm=TRUE)
n  = n0 + n1 + n2
S  = (colSums(phenotypes * M0, na.rm=TRUE) - n0 * Ym)^2 +
(colSums(phenotypes * M1, na.rm=TRUE) - n1 * Ym)^2 +
(colSums(phenotypes * M2, na.rm=TRUE) - n2 * Ym)^2
S/sum((phenotypes - weighted.mean(Ym, n))^2)
}
I_score(genotypes, phenotypes)
fam = "..."
bed = "..."
bim = "..."
dat = read.plink(bed, bim, fam)
library("snpStats")
set.seed(1)
size = 1000  # Size of cohorts
N    = 50000 # Number of SNPs (all independent)
frequency = runif(N, min=0.05, max=.95) # MAF is > 5%
weight    = rexp(N) * sample(c(-1, 1), size=N, replace=TRUE)
mat = rbinom(size * N, size=2, prob=frequency)
mat = matrix(mat, nrow=size, byrow=TRUE)
liability = colSums(t(mat) * weight)
liability = liability + rnorm(size, mean=0, sd=sd(liability))
threshold = quantile(liability, 2/3) # Prevalence is 33%
phenotype = liability > threshold
mat[sample(c(T, F), size=N * size, replace=TRUE, prob=c(1, 99))] = NA
phenotype[sample(c(T, F), size=size, replace=TRUE, prob=c(1, 99))] = NA
snp_names = paste("rs", 1:N, sep="")
ind_names = paste("ID", 1:size, sep="")
colnames(mat) = snp_names
rownames(mat) = ind_names
genotypes = as(mat, "SnpMatrix")
phenotype = ifelse(is.na(phenotype), 0, phenotype + 1)
subject_data = data.frame(FID=ind_names, IID=ind_names,
sex=c(1, 2), phenotype=phenotype)
rownames(subject_data) = ind_names
snp_data = data.frame(chromosome=0, position=1:N, A="A", B="G")
rownames(snp_data) = snp_names
write.plink("output/unif_Laplace_omni",
snps=genotypes,
subject.data=subject_data,
phenotype=phenotype,
sex=sex,
snp.data=snp_data,
chromosome=chromosome,
allele.1=A,
allele.2=B,
position=position)
write.plink("output/unif_Laplace_omni",
snps=genotypes,
subject.data=subject_data,
phenotype=phenotype,
sex=sex,
snp.data=snp_data,
chromosome=chromosome,
allele.1=A,
allele.2=B,
position=position)
fam = "output/unif_Laplace_omni.fam"
bim = "output/unif_Laplace_omni.bim"
bed = "output/unif_Laplace_omni.bed"
dat = read.plink(bed, bim, fam)
dat = read.plink(bed, bim, fam)
dat = read.plink(bed, bed, fam)
dat = read.plink(bed, bed, fam)
getwd()
setwd()
setwd(".")
setwd(getwd)
setwd(getwd())
list.files()
list.files("output")
setwd("output")
list.files()
fam = "unif_Laplace_omni.fam"
bim = "unif_Laplace_omni.bim"
bed = "unif_Laplace_omni.bed"
dat = read.plink(bed, bim, fam)
